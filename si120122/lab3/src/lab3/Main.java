package lab3;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.nio.file.NotDirectoryException;
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

class KeywordCountColumnModel extends DefaultTableColumnModel {

    public KeywordCountColumnModel() {
        TableColumn col = new TableColumn(0);
        col.setHeaderValue("Keyword");
        addColumn(col);

        TableColumn col2 = new TableColumn(1);
        col2.setHeaderValue("Quantidade");
        addColumn(col2);
    }
}

class KeywordCountTableModel extends AbstractTableModel {

    private String[] keywords = new String[]{"abstract", "continue", "for",
        "new", "switch", "assert", "default", "if", "package", "synchronized",
        "boolean", "do", "goto", "private", "this", "break", "double",
        "implements", "protected", "throw", "byte", "else", "import", "public",
        "throws", "case", "enum", "instanceof", "return", "transient", "catch",
        "extends", "int", "short", "try", "char", "final", "interface",
        "static", "void", "class", "finally", "long", "strictfp", "volatile",
        "const", "float", "native", "super", "while"};
    private int nkeyword = keywords.length;
    private int[] counts = new int[nkeyword];
    private Map<String, Integer> idof;

    public KeywordCountTableModel() {
        idof = new HashMap<String, Integer>();
        for (int i = 0; i < nkeyword; i++) {
            idof.put(keywords[i], i);
        }
    }

    public synchronized void countWord(String word) {
        if (idof.containsKey(word)) {
            counts[idof.get(word)]++;
            fireTableDataChanged();
        }
    }

    public synchronized void clear() {
        for (int i = 0; i < nkeyword; i++) {
            counts[i] = 0;
        }
        fireTableDataChanged();
    }

    @Override
    public synchronized int getRowCount() {
        return nkeyword;
    }

    @Override
    public synchronized int getColumnCount() {
        return 2;
    }

    @Override
    public synchronized Object getValueAt(int rowIndex, int columnIndex) {
        if (columnIndex == 0) {
            return keywords[rowIndex];
        }
        return counts[rowIndex];
    }
}

/**
 *
 * @author felipe
 */
public class Main extends javax.swing.JFrame {

    private int nfound = 0, nanalyzed = 0;
    private long startTime = 0, elapsedTime = 0;
    private KeywordCountTableModel tableModel;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        setLocationRelativeTo(null);
        tableModel = (KeywordCountTableModel) keywordsTable.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dirNameLabel = new javax.swing.JLabel();
        maxThreadLabel = new javax.swing.JLabel();
        dirNameField = new javax.swing.JTextField();
        maxThreadField = new javax.swing.JTextField();
        analyzeButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        keywordsTable = new javax.swing.JTable();
        analyzeCountLabel = new javax.swing.JLabel();
        analyzeTimeLabel = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lab3");

        dirNameLabel.setText("Diretório para analisar:");

        maxThreadLabel.setText("Número máximo de Threads:");

        analyzeButton.setText("Analisar");
        analyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeButtonActionPerformed(evt);
            }
        });

        keywordsTable.setModel(new KeywordCountTableModel());
        jScrollPane1.setViewportView(keywordsTable);
        keywordsTable.setColumnModel(new KeywordCountColumnModel());

        analyzeCountLabel.setText("Nenhum arquivo achado!");

        analyzeTimeLabel.setText("Nenhuma análise foi feita!");

        clearButton.setText("Limpar");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Lab 3");
        jLabel1.setAlignmentX(0.5F);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(maxThreadLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dirNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dirNameField)
                            .addComponent(maxThreadField)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(analyzeButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(analyzeCountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(analyzeTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 400, Short.MAX_VALUE)
                        .addComponent(clearButton))
                    .addComponent(jScrollPane1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dirNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dirNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxThreadLabel)
                    .addComponent(maxThreadField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analyzeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analyzeCountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analyzeTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showError(String errorMsg) {
        JDialog dialog = new JDialog(this, errorMsg, true);
        dialog.getContentPane().add(new JLabel(errorMsg));
        dialog.setLocationRelativeTo(this);
        dialog.pack();
        dialog.setVisible(true);
    }

    private void analyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeButtonActionPerformed
        String dirName = dirNameField.getText();
        String maxThreadString = maxThreadField.getText();
        int maxthread;

        if (maxThreadString.isEmpty()) {
            maxthread = -1;
        } else {
            try {
                maxthread = Integer.parseInt(maxThreadString);
            } catch (NumberFormatException ex) {
                maxthread = -1;
            }

            if (maxthread < 1) {
                showError("Numero de threads inválido!");
                return;
            }
        }
        try {
            start(dirName, maxthread);
        } catch (NotDirectoryException ex) {
            showError(ex.getMessage());
        }
    }//GEN-LAST:event_analyzeButtonActionPerformed

    private void processFile(File file) {
        nfound++;

        try {
            if (file.getName().endsWith(".java")) {
                Scanner scn = new Scanner(file);
                while (scn.hasNext()) {
                    String word = scn.next();
                    tableModel.countWord(word);
                }
                nanalyzed++;
                scn.close();
            }
        } catch (FileNotFoundException ex) {
        } finally {
            long endTime = System.currentTimeMillis();
            synchronized (this) {
                elapsedTime = endTime - startTime;
            }
            updateUI();
        }
    }

    private synchronized void updateUI() {
        if (nfound == 0) {
            analyzeCountLabel.setText("Nenhum arquivo achado!");
        } else {
            analyzeCountLabel.setText(String.format(
                    "%d arquivo(s) encontrados(s), %d processado(s)!", nfound, nanalyzed));
        }

        if (nanalyzed == 0) {
            analyzeTimeLabel.setText("Nenhuma análise foi feita!");
        } else {
            analyzeTimeLabel.setText(String.format(
                    "Ultima análise levou %d milisegundos!", elapsedTime));
        }
    }

    private void processDir(File dir) {
        for (File child : dir.listFiles()) {
            if (child.isDirectory()) {
                processDir(child);
            } else if (child.isFile()) {
                processFile(child);
            }
        }
    }

    private void start(String dirName, int maxthread) throws NotDirectoryException {
        final File dir = new File(dirName);

        if (!dir.isDirectory()) {
            throw new NotDirectoryException("\"" + dirName + "\" is not a directory!");
        }

        analyzeButton.setEnabled(false);
        clearButton.setEnabled(false);

        new Thread() {
            @Override
            public void run() {
                startTime = System.currentTimeMillis();

                processDir(dir);

                analyzeButton.setEnabled(true);
                clearButton.setEnabled(true);
            }
        }.start();
    }

    private void clear() {
        nfound = 0;
        nanalyzed = 0;
        elapsedTime = 0;
        startTime = 0;
        tableModel.clear();
        updateUI();
    }

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        clear();
    }//GEN-LAST:event_clearButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;






                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyzeButton;
    private javax.swing.JLabel analyzeCountLabel;
    private javax.swing.JLabel analyzeTimeLabel;
    private javax.swing.JButton clearButton;
    private javax.swing.JTextField dirNameField;
    private javax.swing.JLabel dirNameLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable keywordsTable;
    private javax.swing.JTextField maxThreadField;
    private javax.swing.JLabel maxThreadLabel;
    // End of variables declaration//GEN-END:variables
}
